class RebindKeys : ZilchComponent
{
    var TextToDisplay : String = "Press Any Key To Rebind";
    [Property]
    var Left : Boolean;
    [Property]
    var Right : Boolean;
    [Property]
    var Jump : Boolean;
    [Property]
    var Text : CogPath;
    var Boolean : Boolean;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.MouseEnter, this.OnMouseEnter);
        Zero.Connect(this.Owner, Events.MouseExit, this.OnMouseExit);
        Zero.Connect(this.Owner, Events.MouseDown, this.OnMouseDown);
        Zero.Connect(this.Owner, Events.MouseUp, this.OnMouseUp);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(Zero.Keyboard, Events.KeyDown, this.OnKeyDown);
    }
    function OnKeyDown(event : KeyboardEvent)
    {
        if(this.Left && this.Boolean)
        {
            PlayerMovement.LeftMove = event.Key;
            this.Boolean = false;
        }
        if(this.Right && this.Boolean)
        {
            PlayerMovement.RightMove = event.Key;
            this.Boolean = false;
        }
        if(this.Jump && this.Boolean)
        {
            PlayerMovement.JumpMove = event.Key;
            this.Boolean = false;
        }
    }
    function OnLogicUpdate(event : UpdateEvent)
    {
        if(!this.Boolean && this.Left)
        {
            this.Text.Cog.SpriteText.Text = "Left = `PlayerMovement.LeftMove`";
        }
        if(!this.Boolean && this.Right)
        {
            this.Text.Cog.SpriteText.Text = "Right = `PlayerMovement.RightMove`";
        }
        if(!this.Boolean && this.Jump)
        {
            this.Text.Cog.SpriteText.Text = "Jump = `PlayerMovement.JumpMove`";
        }
    }

    function RebindKey()
    {
        this.Text.Cog.SpriteText.Text = this.TextToDisplay;
        this.Boolean = true;
    }

    function OnMouseUp(event : ViewportMouseEvent)
    {
        this.RebindKey();
    }

    function OnMouseDown(event : ViewportMouseEvent)
    {
        this.Owner.Sprite.Color = this.Owner.Sprite.Color + Real4(0.0, 0.0, 0.0, 1.0 - this.Owner.Sprite.Color.W);
    }

    function OnMouseExit(event : ViewportMouseEvent)
    {
        this.Owner.Sprite.Color = this.Owner.Sprite.Color + Real4(0.0, 0.0, 0.0, 1.0 - this.Owner.Sprite.Color.W);
    }

    function OnMouseEnter(event : ViewportMouseEvent)
    {
        this.Owner.Sprite.Color = this.Owner.Sprite.Color + Real4(0.0, 0.0, 0.0, 0.75 - this.Owner.Sprite.Color.W);
    }
}
