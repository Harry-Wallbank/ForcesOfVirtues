class CollisionScript : ZilchComponent
{
    var Battling : Boolean = false;
    
    var LeftNum : Integer;
    var RightNum : Integer;
    var TopNum : Integer;
    var BottomNum : Integer;
    
    var RandomGen : Random = new Random();
    
    function Initialize(init : CogInitializer)
    {
        this.LeftNum = this.RandomGen.DieRoll(10);
        this.RightNum = this.RandomGen.DieRoll(10);
        this.TopNum = this.RandomGen.DieRoll(10);
        this.BottomNum = this.RandomGen.DieRoll(10);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    function OnLogicUpdate(event : UpdateEvent)
    {
        this.Owner.PlayerMovement.Left = true;
        this.Owner.PlayerMovement.Right = true;
        this.Owner.PlayerMovement.Top = true;
        this.Owner.PlayerMovement.Bottom = true;
        foreach(var enemy in this.LevelSettings.BoardManager.EnemyArray)
        {
            if(enemy != null)
            {
                var enemyPos = enemy.Transform.Translation;
                //checks left
                if(Math.Distance((this.Owner.Transform.Translation - Real3(1,0,0)), enemyPos) < 0.01 && !this.Battling)
                {
                    this.LevelSettings.BattleScriptLoader.BattleScriptEnabled = true;
                    this.LevelSettings.BattleScriptLoader.Enemy = enemy;
                    this.LevelSettings.BattleScriptLoader.Player = this.Owner;
                    this.Battling = true;
                    this.LevelSettings.BattleScriptLoader.PlayerLeftNum = this.LeftNum;
                    this.LevelSettings.BattleScriptLoader.EnemyRightNum = enemy.EnemyNum.RightNum;
                    
                }
                //checks bellow
                if(Math.Distance((this.Owner.Transform.Translation - Real3(0,1,0)), enemyPos) < 0.01 && !this.Battling)
                {
                    this.LevelSettings.BattleScriptLoader.BattleScriptEnabled = true;
                    this.LevelSettings.BattleScriptLoader.Enemy = enemy;
                    this.LevelSettings.BattleScriptLoader.Player = this.Owner;
                    this.Battling = true;
                    this.LevelSettings.BattleScriptLoader.PlayerBottomNum = this.BottomNum;
                    this.LevelSettings.BattleScriptLoader.EnemyTopNum = enemy.EnemyNum.TopNum;
                }
                //checks right
                if(Math.Distance((this.Owner.Transform.Translation + Real3(1,0,0)), enemyPos) < 0.01 && !this.Battling)
                {
                    this.LevelSettings.BattleScriptLoader.BattleScriptEnabled = true;
                    this.LevelSettings.BattleScriptLoader.Enemy = enemy;
                    this.LevelSettings.BattleScriptLoader.Player = this.Owner;
                    this.Battling = true;
                    this.LevelSettings.BattleScriptLoader.PlayerRightNum = this.RightNum;
                    this.LevelSettings.BattleScriptLoader.EnemyLeftNum = enemy.EnemyNum.LeftNum;
                }
                //checks above
                if(Math.Distance((this.Owner.Transform.Translation + Real3(0,1,0)), enemyPos)  < 0.01 && !this.Battling)
                {
                    this.LevelSettings.BattleScriptLoader.BattleScriptEnabled = true;
                    this.LevelSettings.BattleScriptLoader.Enemy = enemy;
                    this.LevelSettings.BattleScriptLoader.Player = this.Owner;
                    this.Battling = true;
                    this.LevelSettings.BattleScriptLoader.PlayerTopNum = this.TopNum;
                    this.LevelSettings.BattleScriptLoader.EnemyBottomNum = enemy.EnemyNum.BottomNum;
                }
            }
        }
        foreach(var player in this.LevelSettings.BoardManager.PlayerArray)
        {
            if(player != null)
            {
                var playerPos = player.Transform.Translation;
                if(this.Owner.Transform.Translation - Real3(1,0,0) == playerPos)
                    this.Owner.PlayerMovement.Left = false;
                if(this.Owner.Transform.Translation + Real3(1,0,0) == playerPos)
                    this.Owner.PlayerMovement.Right = false;
                if(this.Owner.Transform.Translation - Real3(0,1,0) == playerPos)
                    this.Owner.PlayerMovement.Bottom = false;
                if(this.Owner.Transform.Translation + Real3(0,1,0) == playerPos)
                    this.Owner.PlayerMovement.Top = false;
            }
        }
        foreach(var wall in this.LevelSettings.BoardManager.WallArray)
        {
            var wallPos = wall.Transform.Translation;
            if(this.Owner.Transform.Translation - Real3(1,0,0) == wallPos)
                this.Owner.PlayerMovement.Left = false;
            if(this.Owner.Transform.Translation + Real3(1,0,0) == wallPos)
                this.Owner.PlayerMovement.Right = false;
            if(this.Owner.Transform.Translation - Real3(0,1,0) == wallPos)
                this.Owner.PlayerMovement.Bottom = false;
            if(this.Owner.Transform.Translation + Real3(0,1,0) == wallPos)
                this.Owner.PlayerMovement.Top = false;
        }
        if(this.Owner.Transform.Translation == Real3(this.LevelSettings.BoardManager.Columns -1,this.LevelSettings.BoardManager.Rows -1,0))
        {
            this.Space.LoadLevel(Level.BrokenBunnySplash);
        }
    }
}
